# Copyright Microsoft Corporation
# This Sample Code is provided for the purpose of illustration only and is not intended to be used in a production environment.
# THIS SAMPLE CODE AND ANY RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. 
# We grant You a nonexclusive, royalty-free right to use and modify the Sample Code and to reproduce and distribute the object code form of the Sample Code, provided that You agree:
# (i) to not use Our name, logo, or trademarks to market Your software product in which the Sample Code is embedded;
# (ii) to include a valid copyright notice on Your software product in which the Sample Code is embedded; and
# (iii) to indemnify, hold harmless, and defend Us and Our suppliers from and against any claims or lawsuits, including attorneysâ€™ fees, that arise or result from the use or distribution of the Sample Code.
# Please note: None of the conditions outlined in the disclaimer above will supersede the terms and conditions contained within the Premier Customer Services Description.

# This is a basic workflow to help you get started with Actions

name: workflow-import-data 

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      solution-name:
        description: "Solution Name"
        type: string
        required: true
        default: 'OrgDemo'
      environment:
        type: string
        required: true
      branch-name:
        type: string
        required: false
      branch-type:
        type: string
        required: true
      folder-path:
        type: string
        required: false
        default: '.'
      data-file:
        type: string
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  import-data:
    environment: ${{ inputs.environment }}
    # The type of runner that the job will run on
    runs-on: windows-latest
    permissions:
      contents: read
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set branch variables
        run: |
          if ( $inputs.'branch-type' -eq 'main')
          {
            $branchName = 'main'
          } else {
            $branchName = $inputs.'branch-type' + '/' +$inputs.'branch-name'
          }
          echo "branch-name=$branchName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        shell: pwsh
      - name: check-branch-exists
        id: check-branch-exists
        uses: GuillaumeFalourd/branch-exists@v1
        with:
          branch: ${{ inputs.branch-name }}
      - name: debug check exists
        run: echo "${{ steps.check-branch-exists.outputs }}"
      - name: Checkout branch if exists
        if: ${{ steps.check-branch-exists.outputs.exists == 'true' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch-name }}
      - name: Checkout branch main
        if: ${{ steps.check-branch-exists.outputs.exists != 'true' }}
        uses: actions/checkout@v4
      - name: Set release variables
        run: |
          $solutionName = '${{ Inputs.solution-name }}';
          if (($inputs.'data-file').length -gt 1)
          {
            if (Test-Path -LiteralPath "$($inputs.'data-file')/data/$solutionName/$solutionName-data.zip") {
              $dataFilePath = "$($inputs.'data-file')/data/$solutionName/$solutionName-data.zip"
              write-host "$dataFilePath exists"
            } else {
              throw  "Release folder not found"
            }
          } else {
            if (Test-Path -LiteralPath "data/$solutionName/$solutionName-data.zip") {
              $dataFilePath = "data/$solutionName/$solutionName-data.zip"
              write-host "$dataFilePath exists"
            } else {
              throw "Release folder not found"
            }
          }
          echo "data-file-path=$dataFilePath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        shell: pwsh
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1
      - name: who-am-i action
        uses: microsoft/powerplatform-actions/who-am-i@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
      - name: import data
        if: ${{ env.data-file-path != '' }}
        uses: microsoft/powerplatform-actions/import-data@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          data-file: '${{ env.data-file-path }}'