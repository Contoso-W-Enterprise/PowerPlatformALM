name: Test variables

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      solution-names:
        description: 'names of solutions'
        required: true
        default:  "OrgDemo,OrgData"
env:
  all-solution-names: "['OrgDemo','OrgData']"

jobs:
  display-variables:
    name: Test
    runs-on: ubuntu-latest
    environment: ${{ vars.POWERPLATFORMTARGETENVIRONMENT }}
    outputs:
      solution-names: ${{ steps.solution-matrix.outputs.solution-names }}
      release-date: ${{ steps.solution-matrix.outputs.release-date }}
    steps:
    - name: Set Solution Names Matrix
      id: solution-matrix
      run: | 
        if ("${{inputs.solution-names}}" -match ','){
          $solutionList = @()
          "${{inputs.solution-names}}" -split ',' | foreach { 
            $solutionList += $_.Trim()
            write-host $_.Trim()
          }
          $solutionNames = ($solutionList | Convertto-Json -compress).toString()
        }
        else {
          $solutionNames = ("${{inputs.solution-names}}" | Convertto-Json -compress).toString()
        }
        write-host $solutionNames
        $releaseDate = (Get-Date).toString('yyyyMMdd');
        write-output "solution-names=$solutionNames" >> $Env:GITHUB_OUTPUT
        write-output "release-date=$releaseDate"  >> $Env:GITHUB_OUTPUT
      #echo "release-date=$(date +'%Y%m%d')" >> "$GITHUB_ENV"
      shell: pwsh
    - name: Variables 
      run: |
        echo ${{ vars.POWERPLATFORMORGURI }}
        echo ${{ secrets.POWERPLATFORMCONTOSOTENANTID }}
        echo ${{ steps.solution-matrix.outputs.solution-names }}
        echo ${{ fromJSON(steps.solution-matrix.outputs.solution-names) }}
    - name: Use variables 1
      run: |
        echo "repository variable : ${{ vars.POWERPLATFORMTARGETENVIRONMENT }}"
        echo "variable : env URI ${{ env.POWERPLATFORMURI }}"
        echo "variable : var URI ${{ vars.POWERPLATFORMORGURI }}"
        echo "variable Target ${{ vars.POWERPLATFORMTARGETENVIRONMENT }}"
        echo "variable Source ${{ vars.POWERPLATFORMSOURCEENVIRONMENT }}"
        echo "Actor ${{ github.actor }} ${{ github.actor_id }} "
        echo "triggering actor ${{ github.triggering_actor }}"

    - name : set varable
      uses: marcdomain/set-variables@v1
      with:
        variables: |
          POWERPLATFORMURI: "${{ vars.POWERPLATFORMORGURI }}"
    - name : check variable
      run: |
          echo "uri : ${{ vars.POWERPLATFORMORGURI }}"
  display-variables-again:    
    name: Test2    
    runs-on: ubuntu-latest
    needs: display-variables
    steps:    
    - name: Use variables 2      
      run: |
        echo "solutions: ${{ needs.display-variables.outputs.solution-names }}"
        echo "repository variable : ${{ vars.POWERPLATFORMTARGETENVIRONMENT }}"        
        echo "variable : env URI $envURI"      
        echo "variable : PPenv URI ${{ env.POWERPLATFORMTARGETENVIRONMENT.POWERPLATFORMURI }}"              
        echo "variable : var URI ${{ vars.POWERPLATFORMURI }}"        
        echo "variable Target ${{ vars.POWERPLATFORMTARGETENVIRONMENT }}"       
  variable-matrix:
    needs: [display-variables, display-variables-again]
    strategy:
      matrix:
        solution-name: ${{ fromJSON( needs.display-variables.outputs.solution-names ) }} 
    name: Variable-matrix 
    runs-on: ubuntu-latest    
    steps:    
    - name: Use matrix
      run: |        
        echo ${{ matrix.solution-name }}
