# Copyright Microsoft Corporation
# This Sample Code is provided for the purpose of illustration only and is not intended to be used in a production environment.
# THIS SAMPLE CODE AND ANY RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. 
# We grant You a nonexclusive, royalty-free right to use and modify the Sample Code and to reproduce and distribute the object code form of the Sample Code, provided that You agree:
# (i) to not use Our name, logo, or trademarks to market Your software product in which the Sample Code is embedded;
# (ii) to include a valid copyright notice on Your software product in which the Sample Code is embedded; and
# (iii) to indemnify, hold harmless, and defend Us and Our suppliers from and against any claims or lawsuits, including attorneysâ€™ fees, that arise or result from the use or distribution of the Sample Code.
# Please note: None of the conditions outlined in the disclaimer above will supersede the terms and conditions contained within the Premier Customer Services Description.

# This is a basic workflow to help you get started with Actions

name: workflow-import-solution 

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      solution-name:
        description: "Solution Name"
        type: string
        required: true
        default: 'OrgDemo'
      environment:
        type: string
        required: true
      branch-name:
        type: string
        required: false
      branch-type:
        type: string
        required: true
      folder-path:
        type: string
        required: false
        default: '.'
      release-name:
        type: string
        required: false
        default: '.'
      managed:
        type: boolean
        required: false
        default: true
      settings-file:
        type: string
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  import:
    environment: ${{ inputs.environment }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: read
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set branch variables
        run: |
          if ( $inputs.'branch-type' -eq 'main')
          {
            $branchName = 'main'
          } else {
            $branchName = $inputs.'branch-type' + '/' +$inputs.'branch-name'
          }
          echo "branch-name=$branchName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        shell: pwsh
      - name: check-branch-exists
        id: check-branch-exists
        uses: GuillaumeFalourd/branch-exists@v1
        with:
          branch: ${{ inputs.branch-name }}
      - name: debug check exists
        run: echo "${{ steps.check-branch-exists.outputs }}"
      - name: Checkout branch if exists
        if: ${{ steps.check-branch-exists.outputs.exists == 'true' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch-name }}
      - name: Checkout branch main
        if: ${{ steps.check-branch-exists.outputs.exists != 'true' }}
        uses: actions/checkout@v4
      - name: Set release variables
        run: |
          $solutionName = '${{ Inputs.solution-name }}';
          if (($inputs.'release-name').length -gt 1)
          {
            $releaseName = $inputs.'release-name'
            write-host "release name: $releaseName"     
            if (($inputs.'folder-path').length -gt 1 )
            {
              $releasePath = $inputs.'folder-path' + '/release/'+ $releaseName + '/'
            } else {
              $releasePath = 'release/' + $releaseName +'/'
            }
          } else {
            write-host "release name: null"     
            if (($inputs.'folder-path').length -gt 1 )
            {
              if (Test-Path -LiteralPath "$($inputs.'folder-path')/release") {
                write-host "tested $($inputs.'folder-path')/release successful"
                $latestRelease = Get-ChildItem -path "$($inputs.'folder-path')/release" -Directory | Sort-Object -Property 'CreationTime' -Descending -top 1
                $latestRelease | select *
                write-host "latest release: $($latestRelease.Name)"
                $releaseName = $latestRelease.name
                $releasePath = $inputs.'folder-path' + '/release/' + $releaseName + '/' 
              } else {
                write-Error "Release folder not found"
              }
            } else {
              if (Test-Path -LiteralPath "release") {
                write-host "tested release successful"
                $latestRelease = Get-ChildItem -path "release" -Directory | Sort-Object -Property 'CreationTime' -Descending -top 1
                $latestRelease | select *
                write-host "latest release: $($latestRelease.Name)"
                $releaseName = $latestRelease.name
                $releasePath = 'release/'+ $releaseName + '/'
              } else {
                write-Error "Release folder not found"
              }
            }
          }
          write-Host $releasePath;
          write-Host ${{ Inputs.solution-name}} ;
          echo "release-name=$releaseName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
          echo "release-path=$releasePath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        shell: pwsh
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1
      - name: who-am-i action
        uses: microsoft/powerplatform-actions/who-am-i@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
      - name: Check solution exists
        id: check-solution-exists
        run: |
          . "PowerShell/PowerPlatform-Utility.ps1"
          $solutionName = '${{ Inputs.solution-name }}';
          $token = Connect-Dataverse -dataverseHost '${{ vars.POWERPLATFORMORGURI }}' -tenantId ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }} -clientId ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }} -clientSecret ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }} 
          $results = Get-DataverseSolution -token $token -dataverseHost '${{ vars.POWERPLATFORMORGURI }}' -solutionUniqueName $solutionName
          if($solutionName -in $results.uniquename)
          {
              echo "check-solution-exists=true" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append; 
          }
          else 
          {
              echo "check-solution-exists=false" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append; 
          }
        shell: pwsh
      - name: Test pwsh output
        run: |
          echo ${{ env.check-solution-exists }}
      #managed solution
      - name: check managed solution
        if: ${{ inputs.managed == 'true'}}
        uses: microsoft/powerplatform-actions/check-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          path: '${{ env.release-path }}${{ inputs.solution-name }}_managed.zip'
      #managed solution & setting file & solution exists
      - name: import upgrade managed Solution with settings file
        if: ${{ inputs.managed  == true && inputs.setting-file != '' && env.check-solution-exists  == true }}
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-file: '${{ env.release-path }}${{ inputs.solution-name }}_managed.zip'
          stage-and-upgrade: true
          force-overwrite: true
          publish-changes: true
          use-deployment-settings-file: true
          deployment-settings-file: ${{ inputs.settings-file }}
          run-asynchronously: true
      #managed solution & setting file & solution not exists
      - name: import new managed Solution with settings file
        if: ${{ inputs.managed  == true && inputs.setting-file != '' && env.check-solution-exists  != true }}
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-file: '${{ env.release-path }}${{ inputs.solution-name }}_managed.zip'
          force-overwrite: true
          publish-changes: true
          use-deployment-settings-file: true
          deployment-settings-file: ${{ inputs.settings-file }}
          run-asynchronously: true
      #managed solution & no setting file & solution exists
      - name: import upgrade managed Solution with out settings file
        if: ${{ inputs.managed == true && inputs.setting-file == '' &&  env.check-solution-exists  == true }}
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-file: '${{ env.release-path }}${{ inputs.solution-name }}_managed.zip'
          stage-and-upgrade: true
          force-overwrite: true
          publish-changes: true
          use-deployment-settings-file: false
          run-asynchronously: true
      #managed solution & no setting file & solution not exists
      - name: import new managed Solution with out settings file
        if: ${{ inputs.managed == true && inputs.setting-file == '' && env.check-solution-exists != true }}
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-file: '${{ env.release-path }}${{ inputs.solution-name }}_managed.zip'
          force-overwrite: true
          publish-changes: true
          use-deployment-settings-file: false
          run-asynchronously: true

      # unmanaged solution
      - name: check unmanaged solution
        if: ${{ inputs.managed == false }}
        uses: microsoft/powerplatform-actions/check-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          path: '${{ env.release-path }}${{ inputs.solution-name }}.zip'
      # unmanaged solution & solution file & solution exist
      - name: Import upgrade Unmanaged Solution with settings file
        if: ${{ inputs.managed == false && inputs.setting-file != '' && env.check-solution-exists == true }}
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-file: '${{ env.release-path }}${{ inputs.solution-name }}.zip'
          stage-and-upgrade: true
          force-overwrite: true
          publish-changes: true
          use-deployment-settings-file: true
          deployment-settings-file: ${{ inputs.settings-file }}
          run-asynchronously: true
      # unmanaged solution & solution file & solution not exist
      - name: Import new Unmanaged Solution with settings file
        if: ${{ inputs.managed  == false && inputs.setting-file != '' && env.check-solution-exists != true }}
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-file: '${{ env.release-path }}${{ inputs.solution-name }}.zip'
          force-overwrite: true
          publish-changes: true
          use-deployment-settings-file: true
          deployment-settings-file: ${{ inputs.settings-file }}
          run-asynchronously: true
      # unmanaged solution & not solution file & solution exist
      - name: Import upgrade Unmanaged Solution without settings file
        if: ${{ inputs.managed == false && inputs.setting-file == '' && env.check-solution-exists == true }}
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-file: '${{ env.release-path }}${{ inputs.solution-name }}.zip'
          stage-and-upgrade: true
          force-overwrite: true
          publish-changes: true
          use-deployment-settings-file: false
          run-asynchronously: true
      # unmanaged solution & not solution file & solution not exist
      - name: Import new Unmanaged Solution without settings file
        if: ${{ inputs.managed == false && inputs.setting-file == '' && env.check-solution-exists != true }}
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMMANAGEMENTCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOPRODUCTIONTENANTID }}
          solution-file: '${{ env.release-path }}${{ inputs.solution-name }}.zip'
          force-overwrite: true
          publish-changes: true
          use-deployment-settings-file: false
          run-asynchronously: true