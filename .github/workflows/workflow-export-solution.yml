# Copyright Microsoft Corporation
# This Sample Code is provided for the purpose of illustration only and is not intended to be used in a production environment.
# THIS SAMPLE CODE AND ANY RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. 
# We grant You a nonexclusive, royalty-free right to use and modify the Sample Code and to reproduce and distribute the object code form of the Sample Code, provided that You agree:
# (i) to not use Our name, logo, or trademarks to market Your software product in which the Sample Code is embedded;
# (ii) to include a valid copyright notice on Your software product in which the Sample Code is embedded; and
# (iii) to indemnify, hold harmless, and defend Us and Our suppliers from and against any claims or lawsuits, including attorneysâ€™ fees, that arise or result from the use or distribution of the Sample Code.
# Please note: None of the conditions outlined in the disclaimer above will supersede the terms and conditions contained within the Premier Customer Services Description.

name: workflow-export-solution 

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      solution-names:
        description: "Solution Name(s)"
        type: string
        required: true
        default: 'OrgDemo'
      environment:
        type: string
        required: true
      ClearEnvironmentVariableValues:
        description: 'Clear Environment variables current values'
        type: boolean
        default: false
      isCommit:
        type: boolean
        default: false
      commitMessage:
        type: string
      branch-name:
        type: string
      branch-type:
        type: string
      folder-path:
        type: string
        required: false
        default: 'PowerPlatformALM'
      delete-existing-source:
        type: boolean
        default: false
        required: false
      publish-customization:
        type: boolean
        default: true
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.environment }}
  cancel-in-progress: false
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    environment: ${{ inputs.environment }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      solution-names: ${{ steps.solution-matrix.outputs.solution-names }}
      release-date: ${{ steps.solution-matrix.outputs.release-date }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    env:
      GITHUB_CONTEXT: ${{ toJSON(github) }}
    steps:
      - name: Show GITHUB Context
        run: | 
          echo "$GITHUB_CONTEXT"
        shell: pwsh
      - name: Set Solution Names Matrix
        id: solution-matrix
        run: | 
          if ("${{inputs.solution-names}}" -match ','){
            $solutionList = @()
            "${{inputs.solution-names}}" -split ',' | foreach { 
              $solutionList += $_.Trim()
              write-host $_.Trim()
            }
            $solutionNames = ($solutionList | Convertto-Json -compress).toString()
          }
          else {
            $solutionNames = "[" + ("${{inputs.solution-names}}" | Convertto-Json -compress).toString() +"]"
          }
          write-host $solutionNames
          $releaseDate = (Get-Date).toString('yyyyMMdd');
          write-output "solution-names=$solutionNames" >> $Env:GITHUB_OUTPUT
          write-output "release-date=$releaseDate"  >> $Env:GITHUB_OUTPUT
        #echo "release-date=$(date +'%Y%m%d')" >> "$GITHUB_ENV"
        shell: pwsh
      - name: Variables 
        run: |
          echo ${{ vars.POWERPLATFORMORGURI }}
          echo ${{ secrets.POWERPLATFORMCONTOSOTENANTID }}
          echo ${{ steps.solution-matrix.outputs.solution-names }}
  publish_customizations:
    needs: setup
    environment: ${{ inputs.environment }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Variables 
        run: |
          echo ${{ needs.setup.outputs.solution-names }}
          echo ${{ fromJSON( needs.setup.outputs.solution-names ) }}
      - name: Install Power Platform Tools
        if: ${{ inputs.publish-customization == true }}
        uses: microsoft/powerplatform-actions/actions-install@v1
      - name: who-am-i action
        if: ${{ inputs.publish-customization == true }}
        uses: microsoft/powerplatform-actions/who-am-i@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMCONTOSOCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMCONTOSOCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOTENANTID }}
      - name: Publish Solution Customizations
        if: ${{ inputs.publish-customization == true }}
        uses: microsoft/powerplatform-actions/publish-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMCONTOSOCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMCONTOSOCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOTENANTID }}

  # This workflow contains a single job called "build"
  export:
    needs: [setup, publish_customizations]
    environment: ${{ inputs.environment }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        solution-name: ${{ fromJSON( needs.setup.outputs.solution-names ) }} 
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.branch-type }}-${{ inputs.branch-name }}
      cancel-in-progress: false
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          lfs: true
          sparse-checkout: |
            .github
            src\${{ matrix.solution-name }}
            release
      - name: checkout exist or create new branch
        run: | 
          git config --global user.email "${GITHUB_ACTOR}"
          git config --global user.name "${GITHUB_ACTOR}@contoso.willinc.ca"
          git fetch
          if ('${{ inputs.branch-type }}' -in ('main','develop')) {
            $branchName = "${{ inputs.branch-type }}"
          } else {
            $branchName = "${{ inputs.branch-type }}/${{ inputs.branch-name }}"
          }
          $branchExists = ($null -ne (git ls-remote --heads origin "$branchName"))
          if ($branchExists) {
            write-host "Branch $branchName exists"
            # git checkout "origin/$branchName"
            # git pull origin "$branchName"
          } else {
            write-host "Branch $branchName does not exists, creating new branch and checking it out"
            git branch "$branchName"
            git checkout -b "$branchName"
            git push -u origin "$branchName"
            # git pull
            # git status
          }
          git config advice.updateSparsePath false
          echo "branch-exists=$branchExists" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
          echo "branch-name=$branchName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        #echo "release-date=$(date +'%Y%m%d')" >> "$GITHUB_ENV"
        shell: pwsh 
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.branch-name }}
          lfs: true
          sparse-checkout: |
            .github
            src\${{ matrix.solution-name }}
            release

      - name: Checkout Template Branch 
        uses: actions/checkout@v4
        with:
          repository: Contoso-W-Enterprise/PowerPlatformALM
          ref: main
          path: ALMTemplate
          github-server-url: 'https://github.com'
          lfs: true
          persist-credentials: true      
          sparse-checkout: |
            .github
            PowerShell
      # Runs a single command using the runners shell
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1
      - name: who-am-i action
        uses: microsoft/powerplatform-actions/who-am-i@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMCONTOSOCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMCONTOSOCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOTENANTID }}
      - name: Export Unmanaged Solution
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMCONTOSOCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMCONTOSOCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOTENANTID }}
          solution-name: ${{ matrix.solution-name }}
          solution-output-file: '${{ inputs.folder-path }}/solutions/${{ matrix.solution-name }}.zip'
          overwrite: true
          export-general-settings: true
      - name: Export Managed Solution
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMCONTOSOCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMCONTOSOCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOTENANTID }}
          solution-name: ${{ matrix.solution-name }}
          solution-output-file: '${{ inputs.folder-path }}/solutions/${{ matrix.solution-name }}_managed.zip'
          managed: true
          overwrite: true
          export-general-settings: true
      - name: Delete existing source file
        if: ${{ inputs.delete-existing-source == true }}
        run: |
          . "${{ github.workspace }}/ALMTemplate/PowerShell/PowerPlatform-Utility.ps1"
          $results = Delete-ExistingSolutionSource -solutionName '${{ matrix.solution-name }}' -folderPath '${{ inputs.folder-path }}' -deleteFiles $true 
          write-host $results
        shell: pwsh

      - name: Unpack Solution
        uses: microsoft/powerplatform-actions/unpack-solution@v1
        with:
          solution-file: '${{ inputs.folder-path }}/solutions/${{ matrix.solution-name }}.zip'
          solution-folder: '${{ inputs.folder-path }}/src/${{ matrix.solution-name }}/'
          process-canvas-apps: true
          solution-type: 'Both'
          overwrite-files: true
      - name: Debug list of files
        run: |
          Get-ChildItem -path '.' -Recurse | foreach { write-host $_.FullName }
        shell: pwsh
      - name: Clear environment variables current values
        id: clear-solution-env-var
        if:  ${{ inputs.ClearEnvironmentVariableValues == true }}
        run: |
          . "${{ github.workspace }}/ALMTemplate/PowerShell/PowerPlatform-Utility.ps1"
          Clear-CurentEnvironmentVariables -solutionName '${{ matrix.solution-name }}' -folderPath '${{ inputs.folder-path }}' -deleteCurrentValues $true
        shell: pwsh

      - name: update solution version
        id: update-solution-version
        run: |
          . "${{ github.workspace }}/ALMTemplate/PowerShell/PowerPlatform-Utility.ps1"
          $solutionName = '${{ matrix.solution-name }}';
          $origVersion = Get-SolutionVersion $solutionName
          switch ("${{ inputs.branch-type }}"){
            "main" {
              $newVersion = Update-SolutionVersion -solutionName '${{ matrix.solution-name }}' -folderPath '${{ inputs.folder-path }}' -MajorVersionIncrement 1 -updateVersion $true
            }
            "feature" {
              $newVersion = Update-SolutionVersion -solutionName '${{ matrix.solution-name }}' -folderPath '${{ inputs.folder-path }}' -ReleaseVersionIncrement 1 -updateVersion $true
            }
            "release" {
              $newVersion = Update-SolutionVersion -solutionName '${{ matrix.solution-name }}' -folderPath '${{ inputs.folder-path }}' -ReleaseVersionIncrement 1 -updateVersion $true
            }
            "development"{
              $newVersion = Update-SolutionVersion -solutionName '${{ matrix.solution-name }}' -folderPath '${{ inputs.folder-path }}' -ReleaseVersionIncrement 1 -updateVersion $true
            }
            "hotfix" {
              $newVersion = Update-SolutionVersion -solutionName '${{ matrix.solution-name }}' -folderPath '${{ inputs.folder-path }}' -PatchVersionIncrement 1 -updateVersion $true
            }
            "bugfix" {
              $newVersion = Update-SolutionVersion -solutionName '${{ matrix.solution-name }}' -folderPath '${{ inputs.folder-path }}' -PatchVersionIncrement 1 -updateVersion $true
            }
            default {
              $newVersion = Update-SolutionVersion -solutionName '${{ matrix.solution-name }}' -folderPath '${{ inputs.folder-path }}' -ReleaseVersionIncrement 1 -updateVersion $true
            }
          }
          write-host $newVersion
          echo "orig-version=$origVersion" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
          echo "new-version=$newVersion" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        shell: pwsh
      - name: Debug list of files ater export
        run: |
          Get-ChildItem -path '.' -Recurse | foreach { write-host $_.FullName }
        shell: pwsh
      - name: Commit to relase branch
        run: |
          git add '${{ inputs.folder-path }}/src/${{ matrix.solution-name }}' --force
          git commit -m "Exporting ${{ matrix.solution-name }} version ${{ env.orig-version }} update to ${{ env.new-version }} from ${{ inputs.environment }}. ${{ inputs.commitMessage }}"
          #git push origin ${{ env.branch-name}}
          git push -u orgin ${{ env.branch-name}}
        shell: pwsh
