# Copyright Microsoft Corporation
# This Sample Code is provided for the purpose of illustration only and is not intended to be used in a production environment.
# THIS SAMPLE CODE AND ANY RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. 
# We grant You a nonexclusive, royalty-free right to use and modify the Sample Code and to reproduce and distribute the object code form of the Sample Code, provided that You agree:
# (i) to not use Our name, logo, or trademarks to market Your software product in which the Sample Code is embedded;
# (ii) to include a valid copyright notice on Your software product in which the Sample Code is embedded; and
# (iii) to indemnify, hold harmless, and defend Us and Our suppliers from and against any claims or lawsuits, including attorneysâ€™ fees, that arise or result from the use or distribution of the Sample Code.
# Please note: None of the conditions outlined in the disclaimer above will supersede the terms and conditions contained within the Premier Customer Services Description.

name: workflow-export-solution 

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      solution-names:
        description: "Solution Name(s)"
        type: string
        required: true
        default: 'OrgDemo'
      environment:
        type: string
        required: true
      ClearEnvironmentVariableValues:
        description: 'Clear Environment variables current values'
        type: boolean
        default: false
      isCommit:
        type: boolean
        default: false
      commitMessage:
        type: string
      branch-name:
        type: string
      branch-type:
        type: string
      VersionMajorIncrement:
        type: number
        default: 0
      VersionMinorIncrement:
        type: number
        default: 0
      VersionReleaseIncrement:
        type: number
        default: 0
      VersionPatchIncrement:
        type: number
        default: 0
      folder-path:
        type: string
        required: false
        default: '.'
      delete-existing-source:
        type: boolean
        default: false
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}  
  cancel-in-progress: false 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  export:
    environment: ${{ inputs.environment }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout branch
        uses: actions/checkout@v4
      - name: Set environment variables
        run: | 
          $branchName = "${{ inputs.branch-type }}/${{ inputs.branch-name }}"
          $branchExists = ($null -ne (git branch --all | where {$_ -like "*$branchName"}))
          if ($branchExists) {
            write-host "Branch $branchName exists"
          } else {
            write-host "Branch $branchName does not exists, creating new branch and checking it out"
            git branch "$branchName"
            git checkout -b "$branchName"
            git push -u origin "$branchName"
            git fetch
            git status
          }
          $releaseDate = (Get-Date).toString('yyyyMMdd');
          echo "release-date=$releaseDate" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
          echo "branch-exists=$branchExists" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
          echo "branch-name=$branchName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        #echo "release-date=$(date +'%Y%m%d')" >> "$GITHUB_ENV"
        shell: pwsh
      - name: Set Solution Names Matrix
        run: | 
          $solutionNames = @()
          echo "solution-names=$solutionNames" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        #echo "release-date=$(date +'%Y%m%d')" >> "$GITHUB_ENV"
        shell: pwsh

 
        ##uses: GuillaumeFalourd/branch-exists@v1
        ##with:
          ##branch: ${{ inputs.branchType }}-${{ inputs.branchName }}
      - name: Checkout new Branch 
        if: ${{ env.branch-exists == 'False' }}
        uses: actions/checkout@v4
        with:
           ref: ${{ env.branch-name }}
      
      # - name: Branch not found
      #   if:  ${{ env.branch-exists == 'False' }}
      #   uses: actions/checkout@v4
        
      # Runs a single command using the runners shell
      - name: Variables 
        run: |
          echo ${{ vars.POWERPLATFORMORGURI }}
          echo ${{ secrets.POWERPLATFORMCONTOSOTENANTID }}
          echo ${{ env.release-date }}
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1
      - name: who-am-i action
        uses: microsoft/powerplatform-actions/who-am-i@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMCONTOSOCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMCONTOSOCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOTENANTID }}
      - name: Publish Solution Customizations
        uses: microsoft/powerplatform-actions/publish-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMCONTOSOCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMCONTOSOCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOTENANTID }}
      - name: Export Unmanaged Solution
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMCONTOSOCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMCONTOSOCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOTENANTID }}
          solution-name: ${{ inputs.solution-names }}
          solution-output-file: '${{ inputs.folder-path }}/solutions/${{ inputs.solution-names }}.zip'
          overwrite: true
          export-general-settings: true
      - name: Export Managed Solution
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ vars.POWERPLATFORMORGURI }}
          app-id: ${{ secrets.POWERPLATFORMCONTOSOCLIENTID }}
          client-secret: ${{ secrets.POWERPLATFORMCONTOSOCLIENTSECRET }}
          tenant-id: ${{ secrets.POWERPLATFORMCONTOSOTENANTID }}
          solution-name: ${{ inputs.solution-names }}
          solution-output-file: '${{ inputs.folder-path }}/solutions/${{ inputs.solution-names }}_managed.zip'
          managed: true
          overwrite: true
          export-general-settings: true
      - name: Delete existing source file
        if: ${{ inputs.delete-existing-source == true }}
        run: |
          . "PowerShell/PowerPlatform-Utility.ps1"
          $results = Delete-ExistingSolutionSource -solutionName '${{ inputs.solution-names }}' -folderPath '${{ inputs.folder-path }}' -deleteFiles $true 
          write-host $results
        shell: pwsh
      - name: Unpack Solution
        uses: microsoft/powerplatform-actions/unpack-solution@v1
        with:
          solution-file: '${{ inputs.folder-path }}/solutions/${{ inputs.solution-names }}.zip'
          solution-folder: '${{ inputs.folder-path }}/src/${{ inputs.solution-names }}/'
          process-canvas-apps: true
          solution-type: 'Both'
          overwrite-files: true
      - name: Debug list of files
        run: |
          Get-ChildItem -path '${{ inputs.folder-path }}' -Recurse | foreach { write-host $_.FullName }
        shell: pwsh
      - name: Clear environment variables current values
        id: clear-solution-env-var
        if:  ${{ inputs.ClearEnvironmentVariableValues == true }}
        run: |
          . "PowerShell/PowerPlatform-Utility.ps1"
          $version = Clear-CurentEnvironmentVariables -solutionName '${{ inputs.solution-names }}' -folderPath '${{ inputs.folder-path }}' -deleteCurrentValues $true
        shell: pwsh
      - name: update solution version
        id: update-solution-version
        run: |
          . "PowerShell/PowerPlatform-Utility.ps1"
          switch ("${{ inputs.branch-type }}"){
            "main" {
              $version = Update-SolutionVersion -solutionName '${{ inputs.solution-names }}' -folderPath '${{ inputs.folder-path }}' -MajorVersionIncrement 1 -updateVersion $true
            }
            "feature" {
              $version = Update-SolutionVersion -solutionName '${{ inputs.solution-names }}' -folderPath '${{ inputs.folder-path }}' -ReleaseVersionIncrement 1 -updateVersion $true
            }
            "release" {
              $version = Update-SolutionVersion -solutionName '${{ inputs.solution-names }}' -folderPath '${{ inputs.folder-path }}' -ReleaseVersionIncrement 1 -updateVersion $true
            }
            "development"{
              $version = Update-SolutionVersion -solutionName '${{ inputs.solution-names }}' -folderPath '${{ inputs.folder-path }}' -ReleaseVersionIncrement 1 -updateVersion $true
            }
            "hotfix" {
              $version = Update-SolutionVersion -solutionName '${{ inputs.solution-names }}' -folderPath '${{ inputs.folder-path }}' -PatchVersionIncrement 1 -updateVersion $true
            }
            "bugfix" {
              $version = Update-SolutionVersion -solutionName '${{ inputs.solution-names }}' -folderPath '${{ inputs.folder-path }}' -PatchVersionIncrement 1 -updateVersion $true
            }
            default {
              $version = Update-SolutionVersion -solutionName '${{ inputs.solution-names }}' -folderPath '${{ inputs.folder-path }}' -ReleaseVersionIncrement 1 -updateVersion $true
            }
          }
          write-host $version
        shell: pwsh
      #- name: branch Solution
      #  uses: microsoft/powerplatform-actions/branch-solution@v1
      #  with:
      #    solution-folder: '${{ inputs.folder-path }}/src/${{ inputs.solution-names }}'
      #    solution-target-folder: '${{ inputs.folder-path }}/src/${{ inputs.solution-names }}'
      #    branch-name: ${{ env.branch-name }}
      #    repo-url: 'https://github.com/Contoso-Enterprise/PowerPlatformALM'
      #    repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Commit to branch
        uses: EndBug/add-and-commit@v9
        with: 
          author_name: 'System Administrator'
          author_email: admin@MngEnvMCAP157851.onmicrosoft.com
          message: ${{ inputs.commitMessage }}
          #new_branch: ${{ inputs.branch-type }}/${{ inputs.branch-name }}
          add: '${{ inputs.folder-path }}/src/. --force'
          default_author: github_actor
          github_token: ${{ secrets.GITHUB_TOKEN }}
