# Copyright Microsoft Corporation
# This Sample Code is provided for the purpose of illustration only and is not intended to be used in a production environment.
# THIS SAMPLE CODE AND ANY RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. 
# We grant You a nonexclusive, royalty-free right to use and modify the Sample Code and to reproduce and distribute the object code form of the Sample Code, provided that You agree:
# (i) to not use Our name, logo, or trademarks to market Your software product in which the Sample Code is embedded;
# (ii) to include a valid copyright notice on Your software product in which the Sample Code is embedded; and
# (iii) to indemnify, hold harmless, and defend Us and Our suppliers from and against any claims or lawsuits, including attorneysâ€™ fees, that arise or result from the use or distribution of the Sample Code.
# Please note: None of the conditions outlined in the disclaimer above will supersede the terms and conditions contained within the Premier Customer Services Description.
name: workflow-pack-solution 

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      solution-name:
        description: "Solution Name"
        type: string
        required: true
        default: 'OrgDemo'
      branch-type:
        type: string
        required: true
      branch-name:
        type: string
        required: true
      folder-path:
        type: string
        required: false
        default: 'PowerPlatformALM'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false 
jobs:
  # This workflow contains a single job called "build"
  pack-solution:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - env:
          EVENT_CONTEXT: ${{ toJSON(github.event) }}
        run: |
          echo $EVENT_CONTEXT
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          lfs: true
          sparse-checkout: |
            .github
            src
            release
      - name: check out branch if exists
        run: |
          git config --global user.email '${{ github.actor }}'
          git config --global user.name "${{ github.actor }}@contoso.willinc.ca"
          git fetch
          git show-ref
          if ("${{ inputs.branch-type }}" -in ("develop","main")){
            $branchName = "${{ inputs.branch-type }}"
          } else {
            $branchName = "${{ inputs.branch-type }}/${{ inputs.branch-name }}"
          }
          $branchExists =  ($null -ne (git branch -r --list "origin/$branchName"))
          #$branchExists = ($null -ne (git ls-remote --heads origin $branchName))
          # if ($branchExists) { 
          #   echo "Branch exists. Checking out..."
          #   #git checkout origin/$branchName
          #   git switch $branchName
          #   git pull origin $branchName
          # } else {
          #   echo "Branch does not exist."
          #   exit
          # }
          echo "branch-exists=$branchExists" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
          echo "branch-name=$branchName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        shell: pwsh
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.branch-name }}
          lfs: true
          sparse-checkout: |
            .github
            src
            release
      - name: Checkout Template Branch 
        uses: actions/checkout@v4
        with:
          repository: Contoso-W-Enterprise/PowerPlatformALM
          ref: main
          path: ALMTemplate
          github-server-url: 'https://github.com'
          lfs: true
          sparse-checkout: |
            .github
            PowerShell
          persist-credentials: true
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Set environment variables
        run: |
          . "${{ github.workspace }}/ALMTemplate/PowerShell/PowerPlatform-Utility.ps1"
          $solutionName = '${{ inputs.solution-name }}';
          $version = Get-SolutionVersion $solutionName
          
          $releaseDate = (Get-Date).toString('yyyyMMdd');
          if (('${{ inputs.folder-path }}').length -gt 1 ){
            $folderPath = "src/"
            $releasePath = "release/$solutionName-$version-$releaseDate/" 
          } else
          {
            $folderPath = "src/" 
            $releasePath = "release/$solutionName-$version-$releaseDate/"
          }
          write-Host $releaseDate;
          write-Host $folderPath;
          write-Host $releasePath;
          write-Host "${{ inputs.solution-name }}";
          echo "release-date=$releaseDate"  | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
          echo "source-path=$folderPath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
          echo "release-path=$releasePath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append;
        shell: pwsh
      # - id: check-branch-exists
      #   uses: GuillaumeFalourd/branch-exists@v1
      #   with:
      #     branch: ${{ inputs.branch-name }}
      # - name: debug check exists
      #   run: echo "${{ steps.check-branch-exists.outputs }}"
      # - name: Checkout branch if exists
      #   if: ${{ steps.check-branch-exists.outputs.exists == 'true' }}
      #   uses: actions/checkout@v4
      #   with:
      #     ref: ${{ inputs.branch-name }}
      # - name: Checkout branch main
      #   if: ${{ steps.check-branch-exists.outputs.exists != 'true' }}
      #   uses: actions/checkout@v4
      - name: Debug list of files
        run: |
          write-host "current folder: $pwd"
          Get-ChildItem -path '.' -Recurse | foreach { write-host $_.FullName }
        shell: pwsh
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1
      - uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-file: ${{ env.release-path }}${{ inputs.solution-name }}.zip
          solution-folder: src/${{ inputs.solution-name }}
          solution-type: Both
          #process-canvas-apps: true
      - name: Debug output
        shell: pwsh
        run: |
          Get-ChildItem  -Recurse | foreach { write-host $_.FullName }
      - name: Commit to relase branch
        run: |
          git status
          git add release
          git commit -m "Packing solution ${{ inputs.solution-name }} to ${{ env.release-path }}. ${{ inputs.commitMessage }}"
          git push origin ${{ env.branch-name}}          
        shell: pwsh
